/* automatically generated by rust-bindgen 0.59.1 */

#![allow(non_camel_case_types)]
use libc::stat;
pub(crate) const ARCHIVE_EOF: i32 = 1;
pub(crate) const ARCHIVE_OK: i32 = 0;

pub(crate) const ARCHIVE_WARN: i32 = -20;
pub(crate) const ARCHIVE_EXTRACT_OWNER: u32 = 1;
pub(crate) const ARCHIVE_EXTRACT_PERM: u32 = 2;
pub(crate) const ARCHIVE_EXTRACT_TIME: u32 = 4;
pub(crate) const ARCHIVE_EXTRACT_ACL: u32 = 32;
pub(crate) const ARCHIVE_EXTRACT_FFLAGS: u32 = 64;
pub(crate) const ARCHIVE_EXTRACT_XATTR: u32 = 128;
pub(crate) type __int64_t = ::std::os::raw::c_long;
pub(crate) type __dev_t = ::std::os::raw::c_ulong;
pub(crate) type __uid_t = ::std::os::raw::c_uint;
pub(crate) type __gid_t = ::std::os::raw::c_uint;
pub(crate) type __ino_t = ::std::os::raw::c_ulong;
pub(crate) type __mode_t = ::std::os::raw::c_uint;
pub(crate) type __nlink_t = ::std::os::raw::c_ulong;
pub(crate) type __off_t = ::std::os::raw::c_long;
pub(crate) type __time_t = ::std::os::raw::c_long;
pub(crate) type __blksize_t = ::std::os::raw::c_long;
pub(crate) type __blkcnt_t = ::std::os::raw::c_long;
pub(crate) type __ssize_t = ::std::os::raw::c_long;
pub(crate) type __syscall_slong_t = ::std::os::raw::c_long;
pub(crate) type la_int64_t = i64;
pub(crate) type la_ssize_t = isize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub(crate) struct archive {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub(crate) struct archive_entry {
    _unused: [u8; 0],
}
pub(crate) type archive_read_callback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut archive,
        _client_data: *mut ::std::os::raw::c_void,
        _buffer: *mut *const ::std::os::raw::c_void,
    ) -> la_ssize_t,
>;
pub(crate) type archive_seek_callback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut archive,
        _client_data: *mut ::std::os::raw::c_void,
        offset: la_int64_t,
        whence: ::std::os::raw::c_int,
    ) -> la_int64_t,
>;
pub(crate) type archive_open_callback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut archive,
        _client_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub(crate) type archive_close_callback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut archive,
        _client_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub(crate) fn archive_read_new() -> *mut archive;
}
extern "C" {
    pub(crate) fn archive_read_support_filter_all(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub(crate) fn archive_read_support_format_all(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub(crate) fn archive_read_support_format_raw(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub(crate) fn archive_read_set_seek_callback(
        arg1: *mut archive,
        arg2: archive_seek_callback,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub(crate) fn archive_read_open(
        arg1: *mut archive,
        _client_data: *mut ::std::os::raw::c_void,
        arg2: archive_open_callback,
        arg3: archive_read_callback,
        arg4: archive_close_callback,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub(crate) fn archive_read_next_header(
        arg1: *mut archive,
        arg2: *mut *mut archive_entry,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub(crate) fn archive_read_data_block(
        a: *mut archive,
        buff: *mut *const ::std::os::raw::c_void,
        size: *mut usize,
        offset: *mut la_int64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub(crate) fn archive_read_add_passphrase(
        arg1: *mut archive,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub(crate) fn archive_read_close(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub(crate) fn archive_read_free(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub(crate) fn archive_write_header(
        arg1: *mut archive,
        arg2: *mut archive_entry,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub(crate) fn archive_write_data_block(
        arg1: *mut archive,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
        arg4: la_int64_t,
    ) -> la_ssize_t;
}
extern "C" {
    pub(crate) fn archive_write_finish_entry(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub(crate) fn archive_write_close(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub(crate) fn archive_write_free(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub(crate) fn archive_write_disk_new() -> *mut archive;
}
extern "C" {
    pub(crate) fn archive_write_disk_set_options(
        arg1: *mut archive,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub(crate) fn archive_write_disk_set_standard_lookup(
        arg1: *mut archive,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub(crate) fn archive_errno(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub(crate) fn archive_error_string(arg1: *mut archive) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub(crate) fn archive_set_error(
        arg1: *mut archive,
        _err: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub(crate) fn archive_entry_free(arg1: *mut archive_entry);
}
extern "C" {
    pub(crate) fn archive_entry_hardlink(arg1: *mut archive_entry)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub(crate) fn archive_entry_pathname(arg1: *mut archive_entry)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub(crate) fn archive_entry_set_hardlink(
        arg1: *mut archive_entry,
        arg2: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub(crate) fn archive_entry_set_pathname(
        arg1: *mut archive_entry,
        arg2: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub(crate) fn archive_entry_stat(arg1: *mut archive_entry) -> *const stat;
}
